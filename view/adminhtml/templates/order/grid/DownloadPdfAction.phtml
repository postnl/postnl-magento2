<script type="text/javascript">
    /**
     * Magento supports callbacks on the massaction, but there is no documentation at all, and the
     * example Magento provides itself (the inline editor) seems to be hardcoded.
     * That's why we fix it this way using jQuery and Knockout.
     */
    require(['ko', 'jquery', 'TIG_PostNL/js/shipment/grid/DownloadPdf'], function (ko, $, download) {
        var koElement, text;

        jQuery('body').on('click', '.action-menu .action-menu-item', function () {
            var element = getPostNLAction(this);

            if (element !== null && element.postnl_action) {
                var downloadUrl = getDownloadUrl(element.postnl_action);
                download(downloadUrl, getFormData(this));
            }
        });

        /**
         * Retrieve the Knockout scope for the element.
         */
        function getKoScope(element) {
            return ko.dataFor(element);
        }

        /**
         * Build the formdata
         *
         * @param element
         * @returns object
         */
        function getFormData(element) {
            var selections = getKoScope(element.parentElement.parentNode).getSelections();
            var startPositionOption = $('#choose_print_start_position');
            var printStartPosition = 0;

            if (startPositionOption.is(':visible') && startPositionOption.length > 0) {
                printStartPosition = startPositionOption.val();
            }

            return {
                namespace: 'sales_order_grid',
                selected: selections.selected,
                printStartPosition: printStartPosition
            };
        }

        /**
         * Check if the current selected action is the PostNL action, and if so, return it.
         *
         * @param element
         * @returns null|object
         */
        function getPostNLAction(element) {
            koElement = getKoScope(element);
            if (koElement.type !== undefined && koElement.type.toLowerCase().indexOf('postnl') !== -1) {
                return koElement;
            }

            return null;
        }

        /**
         * Get the correct url where the necessary actions are handled
         *
         * @param action
         * @returns {string}
         */
        function getDownloadUrl(action)
        {
            var downloadUrl = '';

            switch(action) {
                case 'CreateShipmentsConfirmAndPrintShippingLabels':

                    downloadUrl = '<?= $block->escapeHtml($block->getConfirmAndPrintLabelsUrl()); ?>';
                    break;
                case 'CreateShipmentsConfirmAndPrintPackingSlip':
                    // @codingStandardsIgnoreLine
                    downloadUrl = '<?= $block->escapeHtml($block->getConfirmAndPrintPackingSlipUrl()); ?>';
                    break;
                case 'CreateShipmentsAndPrintPackingSlip':
                    // @codingStandardsIgnoreLine
                    downloadUrl = '<?= $block->escapeHtml($block->getPrintPackingSlipUrl()); ?>';
            }

            return downloadUrl;
        }
    });
</script>
